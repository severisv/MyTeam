@using System.Threading.Tasks
@using MyTeam.Models.Enums
@using MyTeam.Resources
@model MyTeam.ViewModels.Events.CreateEventViewModel

@if (Model.Type == EventType.Trening)
{
    <div class="form-group">
        <label mt-for="Mandatory" mt-icon="asterisk" class="col-xs-2 control-label"></label>
        <div class="col-xs-10">
            <input asp-for="Mandatory" type="checkbox" class="form-control" />
            <a mt-tooltip="@Res.MandatoryExplaination"></a>
            <span asp-validation-for="Mandatory" class="text-danger"></span>
        </div>
    </div>
    if (!Model.IsEditMode)
    {
        <div class="form-group">
            <label mt-for="Recurring" mt-icon="refresh" class="col-xs-2 control-label"></label>
            <div class="col-xs-10 flex">
                <div class="flex-1">
                    <input asp-for="Recurring" type="checkbox" class="form-control" onclick="checkbox.showHideAssociatedElement(this, '#ToDateWrapper')" />
                    <a mt-tooltip="@Res.RecurringExplaination"></a>
                </div>
                <div class="flex-2">
                    <span id="ToDateWrapper" @(Model.Recurring ? String.Empty : "hidden")>
                        <input asp-for="ToDate" class="form-control datepicker" placeholder="@Html.DisplayNameFor(m => m.ToDate)" />
                    </span>
                </div>
            </div>
            <div class="col-xs-offset-2 col-xs-10 flex">
                <span asp-validation-for="Recurring" class="text-danger"></span>
                <span asp-validation-for="ToDate" class="text-danger"></span>
            </div>


        </div>
    }

}

