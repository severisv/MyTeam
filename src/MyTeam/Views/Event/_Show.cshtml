@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNet.Mvc.Rendering
@using MyTeam.Models.Enums
@using MyTeam.Resources
@model MyTeam.Models.Domain.Event

<hr />
@if (!User.IsInRole(Roles.Coach))
{

if(Model.SignupHasClosed()){
    <a asp-action="edit" asp-route-eventId="@Model.Id" class="btn btn-sm btn-primary pull-right" title="@Res.Register @Res.Attendance.ToLower()"><i class="fa fa-check-square-o"></i> @Res.Register @Res.Attendance.ToLower()</a>
}
else {
    <a asp-action="edit" asp-route-eventId="@Model.Id" class="btn btn-default btn-sm pull-right" title="@Res.Edit"><i class="fa fa-edit"></i></a>
}
 
}



<div class="show-upcoming-event">
    <div class="flex">
        <div class="flex-1 event-icon">
            <div>
                <span mt-eventtype="@Model.Type" mt-hidename="true"></span>
            </div>
        </div>
        <div class="flex-2">
            <p>
                <i class="fa fa-calendar"></i> @Model.DateTime.ToString("ddd d MMMM")
            </p>
            <p>
                <i class="fa fa-clock-o"></i> @Model.DateTime.ToString("HH:mm")
            </p>
            <p>
                <i class="fa fa-map-marker"></i> @Html.DisplayFor(m => m.Location)
            </p>
            @if (Model.Voluntary)
            {
                <p>
                    <i class="fa fa-asterisk"></i> @($"{Res.Voluntary} {Res.Attendance.ToLower()}")
                </p>
            }
        </div>
        <div class="flex-3 ">
            @if (Model.Type == EventType.Diverse)
            {
                <h3 class="no-margin">@Html.DisplayFor(m => m.Headline)</h3>
            }
            else if (Model.Type == EventType.Kamp)
            {
                <h3 class="no-margin">vs @Html.DisplayFor(m => m.Opponent)</h3>
            }
            <span class="description">
                @Html.DisplayFor(m => m.Description)
            </span>
        </div>
    </div>
    <div class="clearfix"></div>
</div>







