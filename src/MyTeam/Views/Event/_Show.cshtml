@using System.Threading.Tasks
@using Microsoft.AspNetCore.Mvc.Rendering
@using MyTeam
@model MyTeam.ViewModels.Events.EventViewModel
<hr />


    @if (Model.Type == EventType.Trening)
    {
        if (Model.SignupHasClosed() && Context.UserIsInRole(Roles.Coach, Roles.Admin, Roles.AttendanceTaker)) { 
            <a asp-action="registerattendance" asp-controller="event" asp-route-eventId="@Model.Id" class="btn btn-default pull-right" title="@Res.Register @Res.Attendance.ToLower()"><i class="fa fa-check-square-o"></i><span class="hidden-xs"> @Res.Register @Res.Attendance.ToLower()</span></a>
            
        }
        else if (Context.UserIsInRole(Roles.Coach, Roles.Admin))
            {
                <a asp-action="edit" asp-route-eventId="@Model.Id" class="edit-link  pull-right" title="@Res.Edit"><i class="fa fa-edit"></i></a>
            }
       
    }
    else if (Model.Type == EventType.Kamp )
    {
        if (!Model.SignupHasClosed() && Context.UserIsInRole(Roles.Coach))
        {
            <a asp-action="registerSquad" asp-controller="game" asp-route-eventId="@Model.Id" class="btn btn-default pull-right" title="@Res.TeamSelection"><i class="flaticon-football133"></i><span class="hidden-xs"> @Res.TeamSelection</span></a>

        }
        else if(Context.UserIsInRole(Roles.Coach, Roles.Admin))
        {
            <a asp-action="edit" asp-route-eventId="@Model.Id" class="edit-link  pull-right" title="@Res.Edit"><i class="fa fa-edit"></i></a>
                }
        }
        else if (Model.Type == EventType.Diverse && Context.UserIsInRole(Roles.Coach, Roles.Admin))
        {
            <a asp-action="edit" asp-route-eventId = "@Model.Id" class="edit-link  pull-right" title="@Res.Edit"><i class="fa fa-edit"></i></a>
        }



<div class="show-upcoming-event">
    <div class="show-event-container">
        <div class="event-col-1 event-icon">
            <div>
                <span mt-eventtype="@Model.Type" mt-hidename="true"></span>
            </div>
        </div>
        <div class="event-col-2">
            <p>
                <i class="fa fa-calendar"></i> @Model.DateTime.ToNo()
            </p>
            <p>
                <i class="fa fa-clock-o"></i> @Model.DateTime.ToString("HH:mm")
            </p>
            <p>
                <i class="fa fa-map-marker"></i> @Html.DisplayFor(m => m.Location)
            </p>
            @if (Model.Voluntary == true)
            {
                <p>
                    <i class="fa fa-asterisk"></i> @($"{Res.Voluntary} {Res.Attendance.ToLower()}")
                </p>
            }
        </div>
        <div class="event-col-3 ">
            @if (Model.Type == EventType.Diverse)
            {
                <h3 class="no-margin">@Html.DisplayFor(m => m.Headline)</h3>
            }
            else if (Model.Type == EventType.Kamp)
            {
                <h3 class="no-margin">@Model.Team(Context.GetClub().Teams).ShortName <span class="event-opponentDivider">vs</span> @Html.DisplayFor(m => m.Opponent)</h3>
                <p>
                    <i class="@Icons.GameType(Model.GameType)"></i>&nbsp;@Model.GameType
                </p>

            }
            <span class="description">
                @Html.DisplayFor(m => m.Description)
            </span>
        </div>
    </div>
    <div class="clearfix"></div>
</div>







